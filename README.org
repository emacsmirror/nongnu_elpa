* isearch-light

An Isearch replacement for Emacs.

** Features

- Provide [[About multi matching][multi matching]], a real minibuffer, no unexpected quit or
  errors and comprehensive mode-line indicators.

- Old position is always saved in mark-ring when exiting to a new place.

- Only one command =isl-search= for all which cycle in all matches
  without stopping.

- Select nearest match from your position, not necessarily after or
  before, this initial match can be reached back at any moment.

- Allow jumping to =Iedit= at any time during the search.

- Allow jumping to =helm-occur= at any time.

- Allow showing only the matching lines with their context.

- Help available at any time during search without having to quit
  session.

- Allow resuming previous session in each buffer isl had visited.

It aims to keep simple with only the needed features, no extra
features you will never use.

** Dependencies

No mandatory dependencies, but for a better experience install [[https://github.com/emacs-helm/helm][Helm]] to
have =helm-occur= and [[https://github.com/victorhge/iedit][Iedit]] to allow jumping to iedit session.

** install

No installation from (M)Elpa and package.el is provided for now.

** Namespace

The name of the package is Isearch-light but the lisp file is named
isl.el and all symbols are prefixed with "isl-". For now it is ok like
this especially because it is not packaged in (M)Elpa. If any
conflicts would happen in the future I may rename package, file and symbols.

*** From source

Add isl.el to =load-path=.

Then add =(require 'isl)= in your init file.

Even better, you can autoload it:

#+begin_src elisp
    (autoload 'isl "isl" nil t)
#+end_src

With =use-package= and binding =C-s=

#+begin_src elisp
    (use-package isl
      :bind (("C-s" . isl-search)))
#+end_src

** Usage

=M-x isl-search=

The mode-line give you several infos, arrows up/down tell you the
direction where you are actually moving, the =>= and =<= mean you are
either below or above initial position in buffer. Regex, Multi or Literal
tell you the style of search you are using. Case sensitivity in use is
notified by *, 0 or 1 which mean smart, nil or t for =case-fold-search=.

Here the commands available:

| C-s    | isl-goto-next                  |
| C-r    | isl-goto-prev                  |
| <down> | isl-goto-next                  |
| <up>   | isl-goto-prev                  |
| C-n    | isl-goto-next                  |
| C-p    | isl-goto-prev                  |
| RET    | isl-exit-at-point              |
| C-w    | isl-yank-word-at-point         |
| M-r    | isl-change-matching-style      |
| C-c f  | isl-select-case-fold-search    |
| M-<    | isl-goto-first                 |
| M->    | isl-goto-last                  |
| M-=    | isl-goto-closest-from-start    |
| M-s    | isl-jump-to-helm-occur         |
| C-;    | isl-jump-to-iedit-mode         |
| C-h m  | isl-display-or-quit-help       |
| C-q    | isl-help-quit                  |
| C-v    | isl-scroll-up                  |
| M-v    | isl-scroll-down                |
| C-'    | isl-show-or-hide-context-lines |
| C-l    | isl-recenter                   |

Don't forget =C-h m= which will show you all these commands while
running isearch-light.

** About multi matching

By default =isl-search= uses multi matching like Helm, with limitation to
symbol, not line like in Helm, that means "foo bar" matches "foo-bar"
or "bar-foo" but not a line with "foo" and "bar" inside e.g. "foo some
text bar", when you want to match something like this you have to use
regexp e.g. "foo.*bar".

To use multi matching, separate text with one space, each pattern
beginning by "!" will mean match everything but this, e.g. "foo !bar"
will not match "foo-bar" but will match "foo-baz".

[[screen_shot1.png]]

Note: You can jump to =helm-occur= for a line based search.
You can also jump to [[https://github.com/victorhge/iedit][iedit-mode]] with multi match pattern.

** Isearch-light vs helm-occur

Isearch-light is a good tool for searching words or symbols in a
buffer and even if it can search several words separated by spaces,
helm-occur is more efficient for this as it is based on line searching.

Helm-occur is not efficient when you have to search in a buffer with
continuous text with no newlines e.g. some logs or debug logs
etc... you have better time using isearch-light.

A good compromise is to start searching with isearch-light and if it
turns out what you need to match is whole lines instead of words or
symbols, switch to helm-occur with =isl-jump-to-helm-occur= bound by
default to =M-s=.

** Use isearch-light for helm-help

Starting from Emacs-27 Isearch works more or less with unexpected
effects, you have better time using =isl-search= as the search command for
helm-help, here how to replace default setting by `isl` in helm-help:

#+begin_src elisp
    (use-package helm-lib
      :config
      (use-package isl)
      (helm-help-define-key "C-s" nil)
      (helm-help-define-key "C-r" nil)
      (helm-help-define-key "C-s" 'isl-search))
#+end_src

An alternative is to customize `helm-help-hkmap` from the customize interface.


